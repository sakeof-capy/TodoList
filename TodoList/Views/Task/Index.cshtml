@model IEnumerable<TodoList.Data.Domain.TodoListTask>

@{
    Layout = "~/Views/Shared/_TaskLayout.cshtml";
    ViewData["Title"] = "Task Index";
    var todayTaskActiveClass = ViewData["Title"].Equals("Task Index") ? "today-active" : "";
}

<div class="task-page-container">
    <aside class="task-sidebar" id="sidebar">
        <div class="menu-icon" onclick="toggleSidebar()"></div>
        <div class="sidebar-content">

            <a href="@Url.Action("Index", "Task")" class="sidebar-item @todayTaskActiveClass">
            <span class="icon today-icon"></span><span class="text">Today’s tasks</span>
        </a>
            <a href="@Url.Action("AllTasks", "Task")" class="sidebar-item">
    <span class="icon alltasks-icon"></span><span class="text">All tasks</span>
</a>
           <a href="@Url.Action("Settings", "Task")" class="sidebar-item">
                <span class="icon settings-icon"></span><span class="text">Settings</span>
</a>

<form asp-action="Logout" asp-controller="User" method="post">
    @Html.AntiForgeryToken()
    <button type="submit" class="sidebar-item" style="background: none; border: none; cursor: pointer;">
        <span class="icon exit-icon"></span><span class="text"> </span>
    </button>
</form>



        </div>
    </aside>
    <section class="task-main">

        <div class="task-header-panel">
            <h2 class="task-heading">Today's Tasks</h2>
        
        </div>

        <div class="create-task-btn-container">
            <a href="@Url.Action("Create", "Task")" class="btn btn-primary create-task-btn">Create Task</a>
        </div>



        <div class="task-list">
        
   @foreach (var task in Model)
{
    <div class="task-panel @(task.IsComplete ? "completed-task" : "")" data-task-id="@task.Id">
        <div class="task-info" onclick="editTask(@task.Id)">
            <span class="task-title @(task.IsComplete ? "strikethrough" : "")">@task.Title</span>
                <span class="task-time">
                    <strong>Due Date:</strong> 
                    @((task.DueDate != null) ? task.DueDate.Value.ToString("MMMM dd, yyyy") : "No due date")
                </span>
                 </div>
        <div class="task-status" onclick="toggleTaskStatus(event, @task.Id)">
            <span class="icon @(task.IsComplete ? "complete-icon" : "not-complete-icon")"></span>
        </div>
        <button type="button" class="delete-btn" onclick="deleteTask(@task.Id)">✕</button>
              
    </div>
}

</div>
    </section>

      <script>
function editTask(taskId) {
    window.location.href = '@Url.Action("Edit", "Task")/' + taskId;
}

function toggleTaskStatus(event, taskId) {
    event.stopPropagation(); // Prevents the editTask from being called when the icon is clicked
    event.preventDefault();  // Prevents the default action

    $.ajax({
        url: '@Url.Action("ToggleTaskStatus", "Task")',
        type: 'POST',
        data: { id: taskId },
        success: function(response) {
            if(response.success) {
                var taskPanel = document.querySelector(`div[data-task-id="${taskId}"]`);
                var icon = taskPanel.querySelector('.icon');
                var taskTitle = taskPanel.querySelector('.task-title');
                
                // Update the icon and title based on the new task status
                if(response.status) {
                    icon.classList.remove('not-complete-icon');
                    icon.classList.add('complete-icon');
                    taskTitle.classList.add('strikethrough');
                } else {
                    icon.classList.add('not-complete-icon');
                    icon.classList.remove('complete-icon');
                    taskTitle.classList.remove('strikethrough');
                }
            }
        }
    });
}

function deleteTask(taskId) {
    if (confirm('Are you sure you want to delete this task?')) {
        const token = document.getElementsByName("__RequestVerificationToken")[0].value; // Get CSRF token
        fetch(`@Url.Action("DeleteConfirmed", "Task")/${taskId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token  // Include CSRF token in the request header
            },
            body: JSON.stringify({ id: taskId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const taskPanel = document.querySelector(`div[data-task-id="${taskId}"]`);
                taskPanel.remove(); // Remove the task panel from the DOM
            } else {
                alert('Failed to delete the task.');
            }
        })
        .catch(error => console.error('Error deleting task:', error));
    }
}


</script>

</div>
